consumes:
- application/json
definitions:
  Error:
    properties:
      code:
        format: int64
        type: integer
      description:
        description: A detail description about the error message.
        type: string
      error:
        description: If there are more than one error list them out. Ex. list out
          validation errors by each field.
        items:
          $ref: '#/definitions/ErrorListItem'
        type: array
      message:
        description: Error message.
        type: string
      moreInfo:
        description: Preferably an url with more details about the error.
        type: string
    required:
    - code
    - message
    title: Error object returned with 4XX HTTP status
  ErrorListItem:
    properties:
      code:
        format: int64
        type: integer
      message:
        description: Description about individual errors occurred
        type: string
    required:
    - code
    - message
    title: Description of individual errors that may have occurred during a request.
  MenuItem:
    properties:
      description:
        type: string
      image:
        type: string
      name:
        type: string
      price:
        type: string
    required:
    - name
    title: Pizza menu Item
  Order:
    properties:
      address:
        type: string
      creditCardNumber:
        type: string
      customerName:
        type: string
      delivered:
        type: boolean
      orderId:
        type: string
      pizzaType:
        type: string
      quantity:
        type: number
    required:
    - orderId
    title: Pizza Order
info:
  contact:
    email: architecture@pizzashack.com
    name: John Doe
    url: http://www.pizzashack.com
  description: |
    This is a RESTFul API for Pizza Shack online pizza delivery store.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: PizzaShackAPI
  version: 1.0.0
paths:
  /menu:
    get:
      description: Return a list of available menu items
      parameters: []
      responses:
        "200":
          description: OK. List of APIs is returned.
          headers: {}
          schema:
            items:
              $ref: '#/definitions/MenuItem'
            type: array
        "304":
          description: Not Modified. Empty body because the client has already the
            latest version of the requested resource.
        "406":
          description: Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'
      security:
      - default: []
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false
        security-types:
        - oauth2
  /order:
    post:
      description: Create a new Order
      parameters:
      - description: Order object that needs to be added
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Order'
      responses:
        "201":
          description: Created. Successful response with the newly created object
            as entity inthe body. Location header contains URL of newly created entity.
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            Location:
              description: The URL of the newly created resource.
              type: string
          schema:
            $ref: '#/definitions/Order'
        "400":
          description: Bad Request. Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        "415":
          description: Unsupported Media Type. The entity of the request was in a
            not supported format.
          schema:
            $ref: '#/definitions/Error'
      security:
      - default: []
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false
        security-types:
        - oauth2
  /order/{orderId}:
    delete:
      description: Delete an existing Order
      parameters:
      - description: Order Id
        format: string
        in: path
        name: orderId
        required: true
        type: string
      responses:
        "200":
          description: OK. Resource successfully deleted.
        "404":
          description: Not Found. Resource to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'
        "412":
          description: Precondition Failed. The request has not been performed because
            one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'
      security:
      - default: []
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false
        security-types:
        - oauth2
    get:
      description: Get details of an Order
      parameters:
      - description: Order Id
        format: string
        in: path
        name: orderId
        required: true
        type: string
      responses:
        "200":
          description: OK Requested Order will be returned
          headers: {}
          schema:
            $ref: '#/definitions/Order'
        "304":
          description: Not Modified. Empty body because the client has already the
            latest version of the requested resource.
        "404":
          description: Not Found. Requested API does not exist.
          schema:
            $ref: '#/definitions/Error'
        "406":
          description: Not Acceptable. The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'
      security:
      - default: []
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false
        security-types:
        - oauth2
    put:
      description: Update an existing Order
      parameters:
      - description: Order Id
        format: string
        in: path
        name: orderId
        required: true
        type: string
      - description: Order object that needs to be added
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Order'
      responses:
        "200":
          description: OK. Successful response with updated Order
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            Location:
              description: The URL of the newly created resource.
              type: string
          schema:
            $ref: '#/definitions/Order'
        "400":
          description: Bad Request. Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Not Found. The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        "412":
          description: Precondition Failed. The request has not been performed because
            one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'
      security:
      - default: []
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false
        security-types:
        - oauth2
produces:
- application/json
schemes:
- https
security:
- default: []
securityDefinitions:
  default:
    authorizationUrl: https://test.com
    flow: implicit
    type: oauth2
swagger: "2.0"
x-wso2-application-security:
  optional: false
  security-types:
  - oauth2
x-wso2-auth-header: Authorization
x-wso2-basePath: /pizzashack/1.0.0
x-wso2-cors:
  accessControlAllowCredentials: false
  accessControlAllowHeaders:
  - authorization
  - Access-Control-Allow-Origin
  - Content-Type
  - SOAPAction
  - apikey
  - testKey
  accessControlAllowMethods:
  - GET
  - PUT
  - POST
  - DELETE
  - PATCH
  - OPTIONS
  accessControlAllowOrigins:
  - '*'
  corsConfigurationEnabled: false
x-wso2-production-endpoints:
  type: http
  urls:
  - https://localhost:9443/am/sample/pizzashack/v1/api/
x-wso2-response-cache:
  cacheTimeoutInSeconds: 300
  enabled: false
x-wso2-sandbox-endpoints:
  type: http
  urls:
  - https://localhost:9443/am/sample/pizzashack/v1/api/
x-wso2-transports:
- http
- https
